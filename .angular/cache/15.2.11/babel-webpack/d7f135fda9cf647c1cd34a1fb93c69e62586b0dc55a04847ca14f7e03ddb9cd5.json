{"ast":null,"code":"import { Observable, from } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport let UsuariosService = /*#__PURE__*/(() => {\n  class UsuariosService {\n    constructor(firestore) {\n      this.firestore = firestore;\n    }\n    /* agregarAlumno(usuario: Usuario): Observable<void> {\r\n      return new Observable<void>((observer) => {\r\n        this.getRol(usuario.rol).subscribe(\r\n          (rol) => {\r\n            if (rol) {\r\n              usuario.rol = rol; // Asigna el rol obtenido al usuario\r\n              this.getGrupo(usuario.grupo).subscribe(\r\n                (grupoRef: any) => {\r\n                  if (grupoRef) {\r\n                    usuario.grupo = grupoRef; // Asigna la referencia del grupo al usuario\r\n                    this.firestore.collection('usuarios').add({\r\n                     ...usuario,\r\n                      grupo: usuario.grupo, // Almacenamiento directo de la referencia\r\n                    }).then(\r\n                      () => {\r\n                        observer.next();\r\n                        observer.complete();\r\n                      },\r\n                      (error) => {\r\n                        observer.error(error);\r\n                      }\r\n                    );\r\n                  } else {\r\n                    observer.error(new Error('Grupo no encontrado'));\r\n                  }\r\n                },\r\n                (error) => {\r\n                  observer.error(error);\r\n                }\r\n              );\r\n            } else {\r\n              observer.error(new Error('Rol no encontrado'));\r\n            }\r\n          },\r\n          (error) => {\r\n            observer.error(error);\r\n          }\r\n        );\r\n      });\r\n    } */\n    agregarAlumno(usuario) {\n      return new Observable(observer => {\n        this.getRol(usuario.rol).subscribe(rol => {\n          if (rol) {\n            usuario.rol = rol; // Asigna el rol obtenido al usuario\n            this.getGrupo(usuario.grupo).subscribe(grupoRef => {\n              if (grupoRef) {\n                usuario.grupo = grupoRef; // Asigna la referencia del grupo al usuario\n                this.firestore.collection('usuarios').add(Object.assign(Object.assign({}, usuario), {\n                  grupo: usuario.grupo\n                })).then(docRef => {\n                  this.crearPerfilPadre(usuario).subscribe(() => {\n                    observer.next();\n                    observer.complete();\n                  }, error => {\n                    observer.error(error);\n                  });\n                }, error => {\n                  observer.error(error);\n                });\n              } else {\n                observer.error(new Error('Grupo no encontrado'));\n              }\n            }, error => {\n              observer.error(error);\n            });\n          } else {\n            observer.error(new Error('Rol no encontrado'));\n          }\n        }, error => {\n          observer.error(error);\n        });\n      });\n    }\n    crearPerfilPadre(usuario) {\n      const padre = {\n        nombre: usuario.nombre_padre,\n        email: usuario.email_padre,\n        contrasena: usuario.contrasena_padre,\n        dni: usuario.dni_padre,\n        rol: 'padre'\n      };\n      return from(this.firestore.collection('usuarios').add(padre)).pipe(map(() => {}), catchError(error => {\n        throw error;\n      }));\n    }\n    getGrupo(grupo) {\n      return this.firestore.collection('grupos', ref => ref.where('nombre', '==', grupo)).get().pipe(map(querySnapshot => {\n        if (querySnapshot.size > 0) {\n          return querySnapshot.docs[0].ref; // Retorna la referencia del primer grupo encontrado\n        } else {\n          return null; // Retorna null si no se encontró ningún grupo con el nombre dado\n        }\n      }), catchError(error => {\n        throw error;\n      }));\n    }\n    getRol(rolId) {\n      return new Observable(observer => {\n        this.firestore.collection('roles').doc(rolId).get().subscribe(doc => {\n          if (doc.exists) {\n            observer.next(doc.data());\n            observer.complete();\n          } else {\n            observer.error(new Error('Rol no encontrado'));\n          }\n        }, error => {\n          observer.error(error);\n        });\n      });\n    }\n    obtenerAlumnosOrdenados() {\n      return this.firestore.collection('usuarios', ref => ref.orderBy('nombre')).snapshotChanges().pipe(map(actions => actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      })));\n    }\n    buscarAlumnosPorNombre(nombre) {\n      return this.firestore.collection('usuarios').snapshotChanges().pipe(map(actions => actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      })), map(alumnos => alumnos.filter(alumno => alumno.nombre.toLowerCase().includes(nombre.toLowerCase()))));\n    }\n    obtenerAlumnoPorId(id) {\n      return this.firestore.doc(`usuarios/${id}`).valueChanges().pipe(map(alumno => {\n        if (alumno) {\n          return Object.assign({\n            id\n          }, alumno);\n        } else {\n          throw new Error('Alumno no encontrado');\n        }\n      }));\n    }\n    /* obtenerAlumnoPorId(id: string): Observable<Usuario> {\r\n      return this.firestore.doc<Usuario>(`usuarios/${id}`).valueChanges().pipe(\r\n        switchMap(alumno => {\r\n          if (alumno) {\r\n            // Convertir la referencia del grupo a un objeto con más información\r\n            const grupoRef = alumno.grupo as DocumentReference;\r\n            return grupoRef.get().pipe(\r\n              map(grupoDoc => {\r\n                const grupoData = grupoDoc.data();\r\n                return { id, ...alumno, grupo: { id: grupoDoc.id, ...grupoData } };\r\n              })\r\n            );\r\n          } else {\r\n            throw new Error('Alumno no encontrado');\r\n          }\r\n        })\r\n      );\r\n    } */\n    actualizarAlumno(id, alumno) {\n      return from(this.firestore.doc(`usuarios/${id}`).update(alumno));\n    }\n    eliminarAlumno(id) {\n      return from(this.firestore.doc(`usuarios/${id}`).delete()).pipe(catchError(error => {\n        throw error;\n      }));\n    }\n    obtenerGrupos() {\n      return this.firestore.collection('grupos').snapshotChanges().pipe(map(actions => actions.map(a => {\n        const data = a.payload.doc.data();\n        return data.nombre;\n      })), catchError(error => {\n        throw error;\n      }));\n    }\n  }\n  UsuariosService.ɵfac = function UsuariosService_Factory(t) {\n    return new (t || UsuariosService)(i0.ɵɵinject(i1.AngularFirestore));\n  };\n  UsuariosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuariosService,\n    factory: UsuariosService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsuariosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}