{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport let UsuariosService = /*#__PURE__*/(() => {\n  class UsuariosService {\n    constructor(firestore) {\n      this.firestore = firestore;\n    }\n    /*  agregarAlumno(usuario: Usuario): Observable<void> {\r\n       return new Observable<void>((observer) => {\r\n         this.getRol(usuario.rol).subscribe(\r\n           (rol) => {\r\n             if (rol) {\r\n               usuario.rol = rol; // Asigna el rol obtenido al usuario\r\n               this.getGrupo(usuario.grupo).subscribe(\r\n                 (grupoId) => {\r\n                   if (grupoId) {\r\n                     usuario.grupo = grupoId; // Asigna el ID del grupo obtenido al usuario\r\n                     this.firestore.collection('usuarios').add(usuario).then(\r\n                       () => {\r\n                         observer.next();\r\n                         observer.complete();\r\n                       },\r\n                       (error) => {\r\n                         observer.error(error);\r\n                       }\r\n                     );\r\n                   } else {\r\n                     observer.error(new Error('Grupo no encontrado'));\r\n                   }\r\n                 },\r\n                 (error) => {\r\n                   observer.error(error);\r\n                 }\r\n               );\r\n             } else {\r\n               observer.error(new Error('Rol no encontrado'));\r\n             }\r\n           },\r\n           (error) => {\r\n             observer.error(error);\r\n           }\r\n         );\r\n       });\r\n     }\r\n    \n     // Función para obtener el ID del grupo desde Firestore\r\n     getGrupo(grupo: string): Observable<string | null> {\r\n       return this.firestore.collection('grupo', ref => ref.where('nombre', '==', grupo)).get()\r\n         .pipe(\r\n           map((querySnapshot) => {\r\n             if (querySnapshot.size > 0) {\r\n               return querySnapshot.docs[0].id; // Retorna el ID del primer grupo encontrado\r\n             } else {\r\n               return null; // Retorna null si no se encontró ningún grupo con el nombre dado\r\n             }\r\n           }),\r\n           catchError((error) => {\r\n             throw error;\r\n           })\r\n         );\r\n     }\r\n     getRol(rolId: string): Observable<any> {\r\n       return new Observable((observer) => {\r\n         this.firestore.collection('roles').doc(rolId).get().subscribe(\r\n           (doc) => {\r\n             if (doc.exists) {\r\n               observer.next(doc.data());\r\n               observer.complete();\r\n             } else {\r\n               observer.error(new Error('Rol no encontrado'));\r\n             }\r\n           },\r\n           (error) => {\r\n             observer.error(error);\r\n           }\r\n         );\r\n       });\r\n     } */\n    agregarAlumno(usuario) {\n      return this.getRol(usuario.rol).pipe(switchMap(rol => {\n        if (!rol) {\n          throw new Error('Rol no encontrado');\n        }\n        usuario.rol = rol; // Asigna el rol obtenido al usuario\n        return this.getGrupo(usuario.grupo);\n      }), switchMap(grupoRef => {\n        if (!grupoRef) {\n          throw new Error('Grupo no encontrado');\n        }\n        usuario.grupo = grupoRef; // Asigna la referencia del grupo al usuario\n        return this.firestore.collection('usuarios').add(usuario);\n      }), map(() => undefined), catchError(error => {\n        throw error;\n      }));\n    }\n    // Función para obtener el ID del grupo desde Firestore\n    getGrupo(grupo) {\n      return this.firestore.collection('grupo', ref => ref.where('nombre', '==', grupo)).get().pipe(map(querySnapshot => {\n        if (querySnapshot.size > 0) {\n          return querySnapshot.docs[0].id; // Retorna el ID del primer grupo encontrado\n        } else {\n          return null; // Retorna null si no se encontró ningún grupo con el nombre dado\n        }\n      }), catchError(error => {\n        throw error;\n      }));\n    }\n    getRol(rolId) {\n      return new Observable(observer => {\n        this.firestore.collection('roles').doc(rolId).get().subscribe(doc => {\n          if (doc.exists) {\n            observer.next(doc.data());\n            observer.complete();\n          } else {\n            observer.error(new Error('Rol no encontrado'));\n          }\n        }, error => {\n          observer.error(error);\n        });\n      });\n    }\n  }\n  UsuariosService.ɵfac = function UsuariosService_Factory(t) {\n    return new (t || UsuariosService)(i0.ɵɵinject(i1.AngularFirestore));\n  };\n  UsuariosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuariosService,\n    factory: UsuariosService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsuariosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}