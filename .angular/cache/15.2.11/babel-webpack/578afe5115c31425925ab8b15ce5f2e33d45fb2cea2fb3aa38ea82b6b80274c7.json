{"ast":null,"code":"import { Observable, from, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport let UsuariosService = /*#__PURE__*/(() => {\n  class UsuariosService {\n    constructor(firestore) {\n      this.firestore = firestore;\n    }\n    agregarAlumno(usuario) {\n      return new Observable(observer => {\n        this.firestore.collection('usuarios').add(usuario // Directamente del formulario\n        ).then(docRef => {\n          const alumnoId = docRef.id;\n          this.crearPerfilPadre(usuario, alumnoId).subscribe(() => {\n            observer.next();\n            observer.complete();\n          }, error => {\n            observer.error(error);\n          });\n        }, error => {\n          observer.error(error);\n        });\n      });\n    }\n    agregarEmpleado(usuario) {\n      return new Observable(observer => {\n        this.firestore.collection('usuarios').add(Object.assign({}, usuario)).then(() => {\n          observer.next();\n          observer.complete();\n        }, error => {\n          observer.error(error);\n        });\n      }).pipe(catchError(error => throwError(error)));\n    }\n    crearPerfilPadre(usuario, alumnoId) {\n      return new Observable(observer => {\n        this.firestore.collection('usuarios', ref => ref.where('dni', '==', usuario.dni_padre)).get().subscribe(querySnapshot => {\n          if (querySnapshot.empty) {\n            const padre = {\n              nombre: usuario.nombre_padre,\n              email: usuario.email_padre,\n              contrasena: usuario.contrasena_padre,\n              dni: usuario.dni_padre,\n              rol: 'padre',\n              hijos: [alumnoId]\n            };\n            this.firestore.collection('usuarios').add(padre).then(() => {\n              observer.next();\n              observer.complete();\n            }, error => {\n              observer.error(error);\n            });\n          } else {\n            const padreDoc = querySnapshot.docs[0];\n            const padreData = padreDoc.data();\n            if (!padreData.hijos) {\n              padreData.hijos = [];\n            }\n            if (!padreData.hijos.includes(alumnoId)) {\n              padreData.hijos.push(alumnoId);\n            }\n            this.firestore.collection('usuarios').doc(padreDoc.id).update(padreData).then(() => {\n              observer.next();\n              observer.complete();\n            }, error => {\n              observer.error(error);\n            });\n          }\n        }, error => {\n          observer.error(error);\n        });\n      });\n    }\n    /*  getGrupo(grupo: any): Observable<DocumentReference | null> {\r\n       return this.firestore.collection('grupos', ref => ref.where('nombre', '==', grupo)).get()\r\n         .pipe(\r\n           map((querySnapshot) => {\r\n             if (querySnapshot.size > 0) {\r\n               return querySnapshot.docs[0].ref;\r\n             } else {\r\n               return null;\r\n             }\r\n           }),\r\n           catchError((error) => {\r\n             throw error;\r\n           })\r\n         );\r\n     } */\n    /*   getRol(rol: any): Observable<DocumentReference | null> {\r\n        return this.firestore.collection('roles', ref => ref.where('nombre', '==', rol)).get()\r\n          .pipe(\r\n            map((querySnapshot) => {\r\n              if (querySnapshot.size > 0) {\r\n                return querySnapshot.docs[0].ref;\r\n              } else {\r\n                return null;\r\n              }\r\n            }),\r\n            catchError((error) => {\r\n              throw error;\r\n            })\r\n          );\r\n      } */\n    obtenerAlumnosOrdenados() {\n      return this.firestore.collection('usuarios', ref => ref.where('rol', '!=', '').orderBy('nombre')).snapshotChanges().pipe(map(actions => actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      })));\n    }\n    buscarAlumnosPorNombre(nombre) {\n      return this.firestore.collection('usuarios', ref => ref.where('rol', '!=', 'padre')).snapshotChanges().pipe(map(actions => actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      })), map(alumnos => alumnos.filter(alumno => alumno.nombre.toLowerCase().includes(nombre.toLowerCase()))));\n    }\n    obtenerUsuarioPorId(id) {\n      return this.firestore.doc(`usuarios/${id}`).valueChanges().pipe(map(alumno => {\n        if (alumno) {\n          return Object.assign({\n            id\n          }, alumno);\n        } else {\n          throw new Error('Usuario no encontrado');\n        }\n      }));\n    }\n    /*  obtenerUsuarioPorId(id: string): Observable<Usuario> {\r\n       return this.firestore.doc<Usuario>(`usuarios/${id}`).valueChanges().pipe(\r\n         map(usuario => {\r\n           if (usuario) {\r\n             return { id, ...usuario };\r\n           } else {\r\n             throw new Error('Empleado no encontrado');\r\n           }\r\n         })\r\n       );\r\n     } */\n    actualizarUsuario(id, usuario) {\n      return from(this.firestore.doc(`usuarios/${id}`).update(usuario));\n    }\n    /* actualizarUsuario(id: string, usuario: Usuario): Observable<void> {\r\n      return from(this.firestore.doc(`usuarios/${id}`).update(usuario));\r\n    } */\n    eliminarUsuario(id) {\n      return from(this.firestore.doc(`usuarios/${id}`).delete()).pipe(catchError(error => {\n        throw error;\n      }));\n    }\n    obtenerBoletinesPorHijoId(hijoId) {\n      return this.firestore.collection('usuarios').doc(hijoId).valueChanges().pipe(map(hijo => hijo.boletines || []));\n    }\n    obtenerCursoPorNombre(nombreCurso) {\n      return this.firestore.collection('cursos', ref => ref.where('nombre', '==', nombreCurso)).valueChanges().pipe(map(cursos => cursos.length > 0 ? cursos[0] : null));\n    }\n    obtenerAlumnosPorCursoYGrupo(cursoId, grupoId) {\n      return this.firestore.collection('usuarios', ref => ref.where('rol', '==', 'alumno').where('curso', '==', cursoId).where('grupo', '==', grupoId)).snapshotChanges().pipe(map(actions => actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      })));\n    }\n    obtenerIdPorDniPadre(dniPadre) {\n      return this.firestore.collection('usuarios', ref => ref.where('dni', '==', dniPadre)).snapshotChanges().pipe(map(changes => {\n        var _a;\n        const doc = (_a = changes[0]) === null || _a === void 0 ? void 0 : _a.payload.doc;\n        return doc ? doc.id : null;\n      }));\n    }\n  }\n  UsuariosService.ɵfac = function UsuariosService_Factory(t) {\n    return new (t || UsuariosService)(i0.ɵɵinject(i1.AngularFirestore));\n  };\n  UsuariosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuariosService,\n    factory: UsuariosService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsuariosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}