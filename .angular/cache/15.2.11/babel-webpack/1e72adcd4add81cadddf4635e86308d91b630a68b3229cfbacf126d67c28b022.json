{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport let ChatsService = /*#__PURE__*/(() => {\n  class ChatsService {\n    constructor(firestore) {\n      this.firestore = firestore;\n    }\n    getChat(userIds) {\n      return this.firestore.collection('chat', ref => ref.where('userIds', 'array-contains', userIds[0])).snapshotChanges().pipe(map(actions => {\n        const chat = actions.map(a => {\n          const data = a.payload.doc.data();\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        }).find(c => userIds.every(id => c.userIds.includes(id)) && c.userIds.length === userIds.length);\n        return chat;\n      }));\n    }\n    createChat(userIds) {\n      const newChat = {\n        userIds,\n        mensajes: []\n      };\n      return this.firestore.collection('chat').add(newChat).then(docRef => {\n        return Object.assign({\n          id: docRef.id\n        }, newChat);\n      });\n    }\n    addMessage(chatId, message) {\n      return this.firestore.collection('chat').doc(chatId).get().toPromise().then(doc => {\n        if (doc.exists) {\n          const chat = doc.data();\n          chat.mensajes.push(message);\n          return this.firestore.collection('chat').doc(chatId).set(chat);\n        } else {\n          throw new Error('Chat no encontrado');\n        }\n      });\n    }\n    getMessages(chatId) {\n      return this.firestore.collection('chat').doc(chatId).snapshotChanges().pipe(map(a => {\n        const data = a.payload.data();\n        return data ? data.mensajes : [];\n      }));\n    }\n  }\n  ChatsService.ɵfac = function ChatsService_Factory(t) {\n    return new (t || ChatsService)(i0.ɵɵinject(i1.AngularFirestore));\n  };\n  ChatsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatsService,\n    factory: ChatsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChatsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}