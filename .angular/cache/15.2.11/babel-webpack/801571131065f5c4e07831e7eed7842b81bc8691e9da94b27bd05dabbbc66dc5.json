{"ast":null,"code":"import { Observable, from } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport let ChatsService = /*#__PURE__*/(() => {\n  class ChatsService {\n    constructor(firestore) {\n      this.firestore = firestore;\n    }\n    getChatBetweenUsers(userId1, userId2) {\n      return this.firestore.collection('chat', ref => ref.where('users', 'array-contains', userId1)).snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data();\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }), map(chats => chats.find(chat => chat.users.includes(userId2))));\n    }\n    createChat(userId1, userId2) {\n      return new Observable(observer => {\n        const newChat = {\n          users: [userId1, userId2],\n          messages: []\n        };\n        this.firestore.collection('chat').add(newChat).then(docRef => {\n          observer.next(docRef.id);\n          observer.complete();\n        });\n      });\n    }\n    /* getOrCreateChat(userId1: string, userId2: string): Observable<string> {\r\n      return this.getChatBetweenUsers(userId1, userId2).pipe(\r\n        switchMap(existingChat => {\r\n          if (existingChat) {\r\n            return new Observable<string>(observer => {\r\n              observer.next(existingChat.id);\r\n              observer.complete();\r\n            });\r\n          } else {\r\n            return this.createChat(userId1, userId2);\r\n          }\r\n        })\r\n      );\r\n    } */\n    getOrCreateChat(userId1, userId2) {\n      const chatId = this.generateChatId(userId1, userId2);\n      const chatRef = this.firestore.collection('chat').doc(chatId).ref;\n      return from(chatRef.get()).pipe(switchMap(chatDoc => {\n        if (chatDoc.exists) {\n          return [chatId];\n        } else {\n          return from(chatRef.set({\n            users: [userId1, userId2]\n          })).pipe(map(() => chatId));\n        }\n      }));\n    }\n    generateChatId(userId1, userId2) {\n      return userId1 < userId2 ? `${userId1}_${userId2}` : `${userId2}_${userId1}`;\n    }\n  }\n  ChatsService.ɵfac = function ChatsService_Factory(t) {\n    return new (t || ChatsService)(i0.ɵɵinject(i1.AngularFirestore));\n  };\n  ChatsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatsService,\n    factory: ChatsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChatsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}