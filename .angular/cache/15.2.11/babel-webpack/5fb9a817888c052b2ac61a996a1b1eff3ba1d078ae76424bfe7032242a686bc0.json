{"ast":null,"code":"import { collection, addDoc } from 'firebase/firestore'; // Importa los métodos directamente desde 'firebase/firestore'\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport let UsuariosService = /*#__PURE__*/(() => {\n  class UsuariosService {\n    constructor(firestore) {\n      this.firestore = firestore;\n    }\n    addAlumno(usuario) {\n      return new Observable(observer => {\n        if (this.validarUsuario(usuario)) {\n          addDoc(collection(this.firestore, 'usuarios'), usuario) // Usa 'collection' con la instancia de AngularFirestore\n          .then(() => {\n            observer.next(); // Emitir valor completado\n            observer.complete(); // Completar el observable\n          }).catch(error => {\n            observer.error(error); // Emitir error si ocurre algún problema\n          });\n        } else {\n          observer.error('Usuario no válido'); // Emitir error si el usuario no es válido\n        }\n      }).pipe(catchError(error => {\n        console.error('Error en el observable', error);\n        return throwError(error); // Manejar errores y relanzarlos\n      }));\n    }\n\n    validarUsuario(usuario) {\n      return !!(usuario.nombre_usuario && usuario.email_usuario && usuario.rol_id && usuario.fecha_nacimiento_usuario);\n    }\n  }\n  UsuariosService.ɵfac = function UsuariosService_Factory(t) {\n    return new (t || UsuariosService)(i0.ɵɵinject(i1.AngularFirestore));\n  };\n  UsuariosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuariosService,\n    factory: UsuariosService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsuariosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}