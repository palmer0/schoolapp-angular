{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/usuario.service\";\nimport * as i3 from \"src/app/services/chats.service\";\nimport * as i4 from \"../../components/bloquechat/bloquechat.component\";\nimport * as i5 from \"../../components/headerlogin/headerlogin.component\";\nexport let Chat = /*#__PURE__*/(() => {\n  class Chat {\n    constructor(route, router, usuarioService, chatsService) {\n      this.route = route;\n      this.router = router;\n      this.usuarioService = usuarioService;\n      this.chatsService = chatsService;\n      this.chatId = null;\n      this.chat = null;\n      this.nombredes = null;\n      this.enviadorId = null;\n      this.destinatarioId = null;\n      this.mensajeTexto = '';\n      this.mensajes = [];\n    }\n    ngOnInit() {\n      this.chatId = this.route.snapshot.paramMap.get('id');\n      if (this.chatId) {\n        this.obtenerChat(this.chatId);\n      }\n    }\n    obtenerChat(chatId) {\n      this.chatsService.getChatById(chatId).subscribe(chat => {\n        this.chat = chat;\n        this.enviadorId = chat.enviador;\n        this.destinatarioId = chat.destinatario;\n      });\n    }\n    /*  ngOnInit(){\r\n       this.chatId = this.route.snapshot.paramMap.get('id');\r\n       if (this.chatId) {\r\n         this.chatsService.getChatById(this.chatId).subscribe(\r\n           (chat: ChatI) => {\r\n             this.chat = chat;\r\n             this.enviadorId = this.chat.enviador;\r\n               if (this.chat) {\r\n                 this.usuarioService.obtenerAlumnoPorId(this.chat.destinatario).subscribe(\r\n                   (user: Usuario) => {\r\n                     this.destinatario = user;\r\n                     this.destinatarioId = user.id;\r\n                     this.nombredes = this.destinatario.nombre;\r\n                   },\r\n                   (error) => {\r\n                     console.error('Error al obtener al usuario: ', error);\r\n                   }\r\n                 );\r\n               }\r\n           },\r\n           (error) => {\r\n             console.error('Error al obtener el chat:', error);\r\n           }\r\n         );\r\n     }\r\n     \r\n    } */\n    /* onEnter(): void {\r\n      if (this.mensaje.trim().length > 0 && this.enviadorId && this.chatId) {\r\n        const nuevoMensaje: Mensaje = {\r\n          userId: this.enviadorId,\r\n          mensaje: this.mensaje.trim(),\r\n          fecha: new Date(),\r\n          id: this.chatsService.generateId();\r\n        };\r\n    \r\n        this.chatsService.addMessageToChat(nuevoMensaje).subscribe(\r\n          () => {\r\n            this.mensaje = ''; // Limpiar el campo de entrada\r\n            this.loadMessages(); // Recargar los mensajes\r\n          },\r\n          (error) => {\r\n            console.error('Error al enviar el mensaje:', error);\r\n          }\r\n        );\r\n      }\r\n    } */\n    loadMessages() {\n      if (this.chatId) {\n        this.chatsService.getMessagesByChatId(this.chatId).subscribe(mensajes => {\n          this.mensajes = mensajes;\n        }, error => {\n          console.error('Error al cargar los mensajes:', error);\n        });\n      }\n    }\n    enviarMensaje(mensajeTexto) {\n      const mensaje = {\n        id: this.chatsService.generateId(),\n        userId: this.chat.enviador,\n        mensaje: mensajeTexto,\n        fecha: new Date()\n      };\n      this.chatsService.enviarMensaje(this.chatId, mensaje);\n    }\n  }\n  Chat.ɵfac = function Chat_Factory(t) {\n    return new (t || Chat)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.UsuariosService), i0.ɵɵdirectiveInject(i3.ChatsService));\n  };\n  Chat.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Chat,\n    selectors: [[\"app-chat\"]],\n    decls: 5,\n    vars: 4,\n    consts: [[1, \"chat-container\"], [\"rootClassName\", \"headerlogin-root-class-name1\"], [3, \"nombre\", \"enviadorId\", \"mensajes\", \"destinatarioId\"], [1, \"chat-container1\"], [\"type\", \"text\", \"placeholder\", \"Mensaje\", 1, \"chat-textinput\", \"input\"]],\n    template: function Chat_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"app-headerlogin\", 1)(2, \"app-bloquechat\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelement(4, \"input\", 4);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"nombre\", ctx.nombredes)(\"enviadorId\", ctx.enviadorId)(\"mensajes\", ctx.mensajes)(\"destinatarioId\", ctx.destinatarioId);\n      }\n    },\n    dependencies: [i4.Bloquechat, i5.Headerlogin],\n    styles: [\"[_nghost-%COMP%]{display:contents}.chat-container[_ngcontent-%COMP%]{width:100%;height:550px;display:flex;overflow:auto;min-height:100vh;align-items:center;flex-direction:column;justify-content:flex-start;background-color:#c1ffc2}.chat-container1[_ngcontent-%COMP%]{flex:0 0 auto;width:935px;height:auto;padding:var(--dl-space-space-unit);align-items:center;margin-bottom:var(--dl-space-space-twounits);justify-content:center;background-color:var(--dl-color-success-header)}.chat-textinput[_ngcontent-%COMP%]{width:100%;border-width:3px}@media (max-width: 1200px){.chat-textinput[_ngcontent-%COMP%]{width:100%;height:60px}}\"]\n  });\n  return Chat;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}