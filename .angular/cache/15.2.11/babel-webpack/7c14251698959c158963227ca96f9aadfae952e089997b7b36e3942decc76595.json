{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport let ChatsService = /*#__PURE__*/(() => {\n  class ChatsService {\n    constructor(firestore) {\n      this.firestore = firestore;\n    }\n    getChatBetweenUsers(userId1, userId2) {\n      return this.firestore.collection('chat', ref => ref.where('users', 'array-contains', userId1)).snapshotChanges().pipe(map(actions => {\n        return actions.map(a => {\n          const data = a.payload.doc.data();\n          const id = a.payload.doc.id;\n          return Object.assign({\n            id\n          }, data);\n        });\n      }), map(chats => chats.find(chat => chat.users.includes(userId2))));\n    }\n    createChat(userId1, userId2) {\n      return new Observable(observer => {\n        const newChat = {\n          destinatario: userId2,\n          enviador: userId1,\n          messages: []\n        };\n        this.firestore.collection('chat').add(newChat).then(docRef => {\n          observer.next(docRef.id);\n          observer.complete();\n        });\n      });\n    }\n    generateId() {\n      return this.firestore.createId();\n    }\n    getOrCreateChat(userId1, userId2) {\n      return this.getChatBetweenUsers(userId1, userId2).pipe(switchMap(existingChat => {\n        if (existingChat) {\n          return new Observable(observer => {\n            observer.next(existingChat.id);\n            observer.complete();\n          });\n        } else {\n          return this.createChat(userId1, userId2);\n        }\n      }));\n    }\n    /*   getOrCreateChat(userId1: string, userId2: string): Observable<string> {\r\n        const chatId = this.generateChatId(userId1, userId2);\r\n        const chatRef = this.firestore.collection('chats').doc(chatId).ref;\r\n    \r\n        return from(chatRef.get()).pipe(\r\n          switchMap(chatDoc => {\r\n            if (chatDoc.exists) {\r\n              return [chatId];\r\n            } else {\r\n              return from(chatRef.set({ users: [userId1, userId2], messages: [] })).pipe(\r\n                map(() => chatId)\r\n              );\r\n            }\r\n          })\r\n        );\r\n      }\r\n    \r\n      private generateChatId(userId1: string, userId2: string): string {\r\n        return userId1 < userId2 ? `${userId1}_${userId2}` : `${userId2}_${userId1}`;\r\n      } */\n    getChatById(chatId) {\n      return this.firestore.collection('chat').doc(chatId).valueChanges();\n    }\n    addMessageToChat(mensaje) {\n      return new Observable(observer => {\n        this.firestore.collection('chat').doc(mensaje.id).set(mensaje).then(() => {\n          observer.next();\n          observer.complete();\n        }).catch(error => {\n          observer.error(error);\n        });\n      });\n    }\n    getMessagesByChatId(chatId) {\n      return this.firestore.collection('chat', ref => ref.where('receptor', '==', chatId).orderBy('fecha')).valueChanges();\n    }\n  }\n  ChatsService.ɵfac = function ChatsService_Factory(t) {\n    return new (t || ChatsService)(i0.ɵɵinject(i1.AngularFirestore));\n  };\n  ChatsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatsService,\n    factory: ChatsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChatsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}