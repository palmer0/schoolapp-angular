{"ast":null,"code":"import { Observable, from, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport let UsuariosService = /*#__PURE__*/(() => {\n  class UsuariosService {\n    constructor(firestore) {\n      this.firestore = firestore;\n    }\n    actualizarEmpleado(id, usuario) {\n      return from(this.firestore.doc(`usuarios/${id}`).update(usuario));\n    }\n    agregarAlumno(usuario) {\n      return new Observable(observer => {\n        this.firestore.collection('usuarios').add(usuario // Directamente del formulario\n        ).then(docRef => {\n          const alumnoId = docRef.id;\n          this.crearPerfilPadre(usuario, alumnoId).subscribe(() => {\n            observer.next();\n            observer.complete();\n          }, error => {\n            observer.error(error);\n          });\n        }, error => {\n          observer.error(error);\n        });\n      });\n    }\n    /* agregarAlumno(usuario: Usuario): Observable<void> {\r\n      return new Observable<void>((observer) => {\r\n        this.getRol(usuario.rol).subscribe(\r\n          (rol) => {\r\n            if (rol) {\r\n              usuario.rol = rol;\r\n              this.getGrupo(usuario.grupo).subscribe(\r\n                (grupoRef: any) => {\r\n                  if (grupoRef) {\r\n                    usuario.grupo = grupoRef;\r\n                    this.firestore.collection('usuarios').add({\r\n                      ...usuario,\r\n                      grupo: usuario.grupo,\r\n                    }).then(\r\n                      (docRef) => {\r\n                        const alumnoId = docRef.id;\r\n                        this.crearPerfilPadre(usuario, alumnoId).subscribe(\r\n                          () => {\r\n                            observer.next();\r\n                            observer.complete();\r\n                          },\r\n                          (error) => {\r\n                            observer.error(error);\r\n                          }\r\n                        );\r\n                      },\r\n                      (error) => {\r\n                        observer.error(error);\r\n                      }\r\n                    );\r\n                  } else {\r\n                    observer.error(new Error('Grupo no encontrado'));\r\n                  }\r\n                },\r\n                (error) => {\r\n                  observer.error(error);\r\n                }\r\n              );\r\n            } else {\r\n              observer.error(new Error('Rol no encontrado'));\r\n            }\r\n          },\r\n          (error) => {\r\n            observer.error(error);\r\n          }\r\n        );\r\n      });\r\n    } */\n    /* agregarEmpleado(usuario: any): Observable<void> {\r\n      return this.getRol(usuario.rol).pipe(\r\n        switchMap(rol => {\r\n          if (!rol) {\r\n            return throwError(new Error('Rol no encontrado'));\r\n          }\r\n              usuario.rol = rol;\r\n              return this.firestore.collection('usuarios').add({\r\n            ...usuario\r\n          }).then(\r\n            () => {\r\n              return new Promise<void>((resolve, reject) => {\r\n                resolve();\r\n              });\r\n            }\r\n          );\r\n        }),\r\n        catchError(error => {\r\n          return throwError(error);\r\n        })\r\n      );\r\n    }\r\n    */\n    agregarEmpleado(usuario) {\n      return new Observable(observer => {\n        this.firestore.collection('usuarios').add(Object.assign({}, usuario)).then(() => {\n          observer.next();\n          observer.complete();\n        }, error => {\n          observer.error(error);\n        });\n      }).pipe(catchError(error => throwError(error)));\n    }\n    crearPerfilPadre(usuario, alumnoId) {\n      return new Observable(observer => {\n        this.firestore.collection('usuarios', ref => ref.where('dni', '==', usuario.dni_padre)).get().subscribe(querySnapshot => {\n          if (querySnapshot.empty) {\n            const padre = {\n              nombre: usuario.nombre_padre,\n              email: usuario.email_padre,\n              contrasena: usuario.contrasena_padre,\n              dni: usuario.dni_padre,\n              rol: 'padre',\n              hijos: [alumnoId]\n            };\n            this.firestore.collection('usuarios').add(padre).then(() => {\n              observer.next();\n              observer.complete();\n            }, error => {\n              observer.error(error);\n            });\n          } else {\n            const padreDoc = querySnapshot.docs[0];\n            const padreData = padreDoc.data();\n            if (!padreData.hijos) {\n              padreData.hijos = [];\n            }\n            if (!padreData.hijos.includes(alumnoId)) {\n              padreData.hijos.push(alumnoId);\n            }\n            this.firestore.collection('usuarios').doc(padreDoc.id).update(padreData).then(() => {\n              observer.next();\n              observer.complete();\n            }, error => {\n              observer.error(error);\n            });\n          }\n        }, error => {\n          observer.error(error);\n        });\n      });\n    }\n    getGrupo(grupo) {\n      return this.firestore.collection('grupos', ref => ref.where('nombre', '==', grupo)).get().pipe(map(querySnapshot => {\n        if (querySnapshot.size > 0) {\n          return querySnapshot.docs[0].ref;\n        } else {\n          return null;\n        }\n      }), catchError(error => {\n        throw error;\n      }));\n    }\n    getRol(rol) {\n      return this.firestore.collection('roles', ref => ref.where('nombre', '==', rol)).get().pipe(map(querySnapshot => {\n        if (querySnapshot.size > 0) {\n          return querySnapshot.docs[0].ref;\n        } else {\n          return null;\n        }\n      }), catchError(error => {\n        throw error;\n      }));\n    }\n    obtenerAlumnosOrdenados() {\n      return this.firestore.collection('usuarios', ref => ref.where('rol', '!=', 'padre').orderBy('nombre')).snapshotChanges().pipe(map(actions => actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      })));\n    }\n    buscarAlumnosPorNombre(nombre) {\n      return this.firestore.collection('usuarios', ref => ref.where('rol', '!=', 'padre')).snapshotChanges().pipe(map(actions => actions.map(a => {\n        const data = a.payload.doc.data();\n        const id = a.payload.doc.id;\n        return Object.assign({\n          id\n        }, data);\n      })), map(alumnos => alumnos.filter(alumno => alumno.nombre.toLowerCase().includes(nombre.toLowerCase()))));\n    }\n    obtenerAlumnoPorId(id) {\n      return this.firestore.doc(`usuarios/${id}`).valueChanges().pipe(map(alumno => {\n        if (alumno) {\n          return Object.assign({\n            id\n          }, alumno);\n        } else {\n          throw new Error('Alumno no encontrado');\n        }\n      }));\n    }\n    obtenerEmpleadoPorId(id) {\n      return this.firestore.doc(`usuarios/${id}`).valueChanges().pipe(map(usuario => {\n        if (usuario) {\n          return Object.assign({\n            id\n          }, usuario);\n        } else {\n          throw new Error('Empleado no encontrado');\n        }\n      }));\n    }\n    actualizarAlumno(id, alumno) {\n      return from(this.firestore.doc(`usuarios/${id}`).update(alumno));\n    }\n    eliminarAlumno(id) {\n      return from(this.firestore.doc(`usuarios/${id}`).delete()).pipe(catchError(error => {\n        throw error;\n      }));\n    }\n    obtenerGrupos() {\n      return this.firestore.collection('grupos').snapshotChanges().pipe(map(actions => actions.map(a => {\n        const data = a.payload.doc.data();\n        return data.nombre;\n      })), catchError(error => {\n        throw error;\n      }));\n    }\n    obtenerBoletinesPorHijoId(hijoId) {\n      return this.firestore.collection('usuarios').doc(hijoId).valueChanges().pipe(map(hijo => hijo.boletines || []));\n    }\n    obtenerCursoPorNombre(nombreCurso) {\n      return this.firestore.collection('cursos', ref => ref.where('nombre', '==', nombreCurso)).valueChanges().pipe(map(cursos => cursos.length > 0 ? cursos[0] : null));\n    }\n  }\n  UsuariosService.ɵfac = function UsuariosService_Factory(t) {\n    return new (t || UsuariosService)(i0.ɵɵinject(i1.AngularFirestore));\n  };\n  UsuariosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuariosService,\n    factory: UsuariosService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsuariosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}